import numpy as np
import torch
from torch.distributions import Categorical
from torch.utils.data import DataLoader, Subset, default_collate

from attacker.utils import get_model, get_dataset
from utils import DEVICE
from victim import OOD
from victim.interface import fetch_logits


def _entropy_calculate(log_its):
    """
    Given the logits calculate the entropy

    :param log_its: tensor of torch
    :type log_its: torch.Tensor

    :return: Numpy array of entropy
    :rtype: numpy.ndarray
    """
    return Categorical(torch.nn.Softmax(dim=0)(log_its)).entropy().cpu().detach().numpy()


def _attacker(attacker, train_set, test_set, ood_dataset, indices_path, model_path):
    """
    Generates result for the attacker model

    :param attacker: Attacker architecture
    :type attacker: str

    :param train_set: Train dataset
    :type train_set: torch.utils.data.Dataset

    :param test_set: Test dataset
    :type test_set: torch.utils.data.Dataset

    :param ood_dataset: Tuple of  train and test dataset generated by OOD dataset
    :type ood_dataset: tuple

    :param indices_path: Torch file of indices used to train the model
    :type indices_path: str

    :param model_path: Absolute value of the model
    :type model_path: str

    :return: Dictionary of entropy values for in-sample and out of sample
    :rtype: dict
    """
    model = get_model(attacker, 10)
    model.load_state_dict(torch.load(model_path))
    model = model.to(DEVICE)
    model.eval()
    indices = torch.load(indices_path)
    indices = [i for i in range(len(train_set)) if i not in indices]
    train_set = Subset(train_set, indices)

    return {
        "in_sample": np.concatenate([
            _entropy_calculate(model(x0)[0])
            for d_set in [train_set]
            for x0, _ in DataLoader(d_set, batch_size=1, shuffle=False,
                                    collate_fn=lambda x: tuple(x_.to(DEVICE) for x_ in default_collate(x)))
        ]),
        "ood": np.concatenate([_entropy_calculate(model(x0)[0])
                               for d_set in [ood_dataset[0], ood_dataset[1], test_set]
                               for x0, _ in DataLoader(d_set, batch_size=1, shuffle=False,
                                                       collate_fn=lambda x: tuple(x_.to(DEVICE) for x_ in default_collate(x)))]),
    }


def _victim(victim_args, train_set, test_set, ood_dataset):
    """
    Generates results for the victim model

    :param victim_args: Victim arguments
    :type victim_args: dict

    :param train_set: Train dataset
    :type train_set: torch.utils.data.Dataset

    :param test_set: Test dataset
    :type test_set: torch.utils.data.Dataset

    :param ood_dataset: Tuple of OOD Dataset
    :type ood_dataset: tuple

    :return: Dictionary of entropy values for in-sample and out of sample
    :rtype: dict
    """
    return {
        "in_sample": [
            _entropy_calculate(fetch_logits(victim_args, x0))
            for d_set in [train_set]
            for x0, _ in DataLoader(d_set, batch_size=1, shuffle=False,
                                    collate_fn=lambda x: tuple(x_.to(DEVICE) for x_ in default_collate(x)))
        ],
        "ood": [_entropy_calculate(fetch_logits(victim_args, x0))
                for d_set in [ood_dataset[0], ood_dataset[1], test_set]
                for x0, _ in DataLoader(d_set, batch_size=1, shuffle=False,
                                        collate_fn=lambda x: tuple(x_.to(DEVICE) for x_ in default_collate(x)))],
    }


def generate_results(victim_args, attacker, indices_path, model_path, data_type):
    """
    Generates results for both attacker model and victim model

    :param victim_args: Victim arguments
    :type victim_args: dict

    :param attacker: Attacker model architecture
    :type attacker: str

    :param indices_path: Torch file of indices used to train the model
    :type indices_path: str

    :param model_path: Attacker model absolute path
    :type model_path: str

    :param data_type: CIFAR 10 or CIFAR 100
    :type data_type: str

    :return: tuple of dictionaries
    :rtype: tuple
    """
    train_set, test_set, outputs = get_dataset(data_type)
    ood_dataset = get_dataset(OOD)
    attacker_result = _attacker(attacker, train_set, test_set, ood_dataset[:2], indices_path, model_path)
    victim_result = _victim(victim_args, train_set, test_set, ood_dataset[:2])

    return attacker_result, victim_result
